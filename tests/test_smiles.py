import unittest
import sys
import os
# Add the parent directory to the sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import graph_potential_similarity as gps

compound_smiles = {
    'CFCl2-CF2-O-CF2Cl': 'FC(Cl)(Cl)C(F)(F)OC(F)(F)Cl',
    'CF3-CCl2-O-CF2Cl': 'FC(F)(F)C(Cl)(Cl)OC(F)(F)Cl',
    'CF2H-CF2-O-CFH2': 'FC(F)C(F)(F)OCF',
    'CF3-CH(CF3)-O-CH3': 'FC(F)(F)C(C(F)(F)F)OC',
    'CF3-CH(CF3)-O-CF2H': 'FC(F)(F)C(C(F)(F)F)OC(F)',
    'Isoflurane (C3H2ClF5O)': 'C(C(F)(F)F)(OC(F)F)Cl',
    'Isoflurane R (C3H2ClF5O)': '[C@@H](C(OC(F)F)(F)F)(F)Cl',
    'Isoflurane S (C3H2ClF5O)': '[C@H](C(F)(F)F)(OC(F)F)Cl',
    'Tropacocaine (C15H19NO2)': 'CN1[C@@H]2CC[C@H]1CC(C2)OC(=O)C3=CC=CC=C3',
    'Cocaine (C17H21NO4)': 'CN1[C@H]2CC[C@@H]1[C@H]([C@H](C2)OC(=O)C3=CC=CC=C3)C(=O)OC',
    'Eucaine alpha (C15H21NO2)': 'C[C@H]1C[C@H](CC(N1)(C)C)OC(=O)C2=CC=CC=C2',
    'Eucaine beta (C15H21NO2)': 'CC1CC(CC(N1)(C)C)OC(=O)C2=CC=CC=C2'
}

sims = [
    ['1.0', '0.8039408761309653', '0.6627921937184189', '0.715126110664259', '0.8039408761309653', '0.5630933147260659', '0.5055483968050851', '0.5055483968050851', '0.8924392012754638', '0.8389980916309117', '0.8924392012754638', '0.5735107383591083'], 
    ['0.8039408761309653', '1.0', '0.8118566796460696', '0.8297827718311972', '0.9583333333333334', '0.5436286416935923', '0.5952991409460318', '0.5952991409460318', '0.8493616139873936', '0.8137975194103582', '0.8493616139873936', '0.5636876445556023'], 
    ['0.6627921937184189', '0.8118566796460696', '1.0', '0.7997791027356064', '0.8118566796460696', '0.507086231146952', '0.5596900337036714', '0.5596900337036714', '0.7517552000344122', '0.6938881208292985', '0.7517552000344122', '0.5298856830822885'], 
    ['0.715126110664259', '0.8297827718311972', '0.7997791027356064', '1.0', '0.8297827718311972', '0.4980344049041677', '0.5448290535613822', '0.5448290535613822', '0.811269003070669', '0.7613149761896726', '0.811269003070669', '0.5156493461644118'], 
    ['0.8039408761309653', '0.9583333333333334', '0.8118566796460696', '0.8297827718311972', '1.0', '0.5436286416935923', '0.5952991409460318', '0.5952991409460318', '0.8493616139873936', '0.8137975194103582', '0.8493616139873936', '0.5636876445556023'], 
    ['0.5630933147260659', '0.5436286416935923', '0.507086231146952', '0.4980344049041677', '0.5436286416935923', '1.0', '0.7500381026496438', '0.7500381026496438', '0.5468815775419551', '0.5704166757029101', '0.5468815775419551', '0.8281941103546251'], 
    ['0.5055483968050851', '0.5952991409460318', '0.5596900337036714', '0.5448290535613822', '0.5952991409460318', '0.7500381026496438', '1.0', '1.0', '0.616210650013465', '0.5170296447029497', '0.616210650013465', '0.916972293947898'], 
    ['0.5055483968050851', '0.5952991409460318', '0.5596900337036714', '0.5448290535613822', '0.5952991409460318', '0.7500381026496438', '1.0', '1.0', '0.616210650013465', '0.5170296447029497', '0.616210650013465', '0.916972293947898'], 
    ['0.8924392012754638', '0.8493616139873936', '0.7517552000344122', '0.811269003070669', '0.8493616139873936', '0.5468815775419551', '0.616210650013465', '0.616210650013465', '1.0', '0.879984928568826', '1.0', '0.5611444094882543'], 
    ['0.8389980916309117', '0.8137975194103582', '0.6938881208292985', '0.7613149761896726', '0.8137975194103582', '0.5704166757029101', '0.5170296447029497', '0.5170296447029497', '0.879984928568826', '1.0', '0.879984928568826', '0.5847022294620727'], 
    ['0.8924392012754638', '0.8493616139873936', '0.7517552000344122', '0.811269003070669', '0.8493616139873936', '0.5468815775419551', '0.616210650013465', '0.616210650013465', '1.0', '0.879984928568826', '1.0', '0.5611444094882543'], 
    ['0.5735107383591083', '0.5636876445556023', '0.5298856830822885', '0.5156493461644118', '0.5636876445556023', '0.8281941103546251', '0.916972293947898', '0.916972293947898', '0.5611444094882543', '0.5847022294620727', '0.5611444094882543', '1.0']
    ]

class TestSMILES(unittest.TestCase):
    def main(self):
        input_names = sorted(compound_smiles.keys())
        n = len(input_names)
        output_matrix = [["" for _ in range(n)] for _ in range(n)]
        for i in range(n):
            output_matrix[i][i] = "1.0"
            for j in range(i + 1, n):
                dist = gps.smiles_distance(compound_smiles[input_names[i]],compound_smiles[input_names[j]])
                sim = 1.0 - dist
                diff = abs(sim - float(sims[i][j]))
                self.assertLessEqual(diff, 1e-10)


if __name__ == '__main__':
    test = TestSMILES()
    test.main()